import { useState, useEffect, useRef } from "react";

import {
  collection,
  doc,
  setDoc,
  deleteDoc,
  updateDoc,
  onSnapshot,
  query,
  orderBy,
} from "firebase/firestore";

import type {
  exerciseObject,
  setObject,
  lastValuesFromExercise,
} from "../interfaces.ts";

import { db } from "../firebase-config.ts";

import Exercise from "../components/Exercise.tsx";
import ExercisesIndex from "../components/ExercisesIndex.tsx";
import ExerciseAdder from "../components/ExerciseAdder.tsx";
import SetAdder from "../components/SetAdder.tsx";

function Exercises() {
  const exercisesTotalRef = useRef(0);

  const lastValuesFromExercises = useRef<lastValuesFromExercise[]>([]);

  const scroller = useRef(null);

  const [exerciseIndex, setExerciseIndex] = useState(-1);

  const [isActiveArray, setIsActiveArray] = useState<Array<boolean>>([]);

  const [exercises, setExercises] = useState<Array<exerciseObject>>([]);

  const [lastReps, setLastReps] = useState(3);
  const [lastWeight, setLastWeight] = useState(50);

  const updateScroller = () => {
    setTimeout(() => {
      const thisScroller = scroller.current;
      if (thisScroller) {
        (thisScroller as HTMLElement).scrollTop = (
          thisScroller as HTMLElement
        ).scrollHeight;
      }
    });
  };

  const handleExerciseAdded = (newExerciseName: string) => {
    // this isn't handling an exercise added, but adding it
    const exercisesRef = doc(collection(db, "exercises"));

    const autoGeneratedId = exercisesRef.id;

    const newExercise = {
      id: autoGeneratedId,
      name: newExerciseName,
      attempts: [],
      order: exercisesTotalRef.current,
    };

    setDoc(exercisesRef, newExercise);
  };

  const deleteExercise = async (exerciseID: string) => {
    const exerciseRef = doc(db, "exercises", exerciseID);
    try {
      await deleteDoc(exerciseRef);
      console.log("Document successfully deleted!");
    } catch (error) {
      console.error("Error removing document: ", error);
    }
  };

  const handleNewAttempt = (index: number) => {
    const newExercises = [...exercises];

    const lastAttempt =
      newExercises[index].attempts[newExercises[index].attempts.length - 1];

    if (lastAttempt?.length !== 0) {
      newExercises[index].attempts.push([]);

      interface Dictionary {
        [key: string]: unknown;
      }

      const attemptArray: Dictionary[] = [];

      newExercises[index].attempts.forEach((attempt) => {
        const myObject: Dictionary = {};

        attempt.forEach((value, index) => {
          const indexString = index.toString();
          myObject[indexString] = value;
        });

        attemptArray.push(myObject);
      });

      const newFirestoreDocData = {
        id: newExercises[index].id,
        name: newExercises[index].name,
        attempts: attemptArray,
        order: newExercises[index].order,
      };

      const exerciseRef = doc(db, "exercises", newExercises[index].id);

      updateDoc(exerciseRef, newFirestoreDocData);
    }
  };

  const handleNewSet = (newSet: setObject) => {
    const newExercises = [...exercises];
    newExercises[exerciseIndex].attempts[
      newExercises[exerciseIndex].attempts.length - 1
    ].push(newSet);

    interface Dictionary {
      [key: string]: unknown;
    }

    const attemptArray: Dictionary[] = [];

    newExercises[exerciseIndex].attempts.forEach((attempt) => {
      const myObject: Dictionary = {};

      attempt.forEach((value, index) => {
        const indexString = index.toString();
        myObject[indexString] = value;
      });

      attemptArray.push(myObject);
    });

    const newFirestoreDocData = {
      attempts: attemptArray,
    };

    const exerciseRef = doc(db, "exercises", newExercises[exerciseIndex].id);

    updateDoc(exerciseRef, newFirestoreDocData);

    updateScroller();
  };

  useEffect(() => {
    const tempIsActiveArray = new Array(exercisesTotalRef.current).fill(false);
    tempIsActiveArray[exerciseIndex] = true;
    setIsActiveArray(tempIsActiveArray);
    updateScroller();
    if (lastValuesFromExercises.current[exerciseIndex]) {
      // why would this not be true?
      setLastReps(lastValuesFromExercises.current[exerciseIndex].reps);
      setLastWeight(lastValuesFromExercises.current[exerciseIndex].weight);
    }
  }, [exerciseIndex]);

  useEffect(() => {
    const q = query(collection(db, "exercises"), orderBy("order", "asc"));

    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const dataFromFirestore: exerciseObject[] = [];

      querySnapshot.forEach((doc) => {
        const thisExerciseAttempts: Array<Array<setObject>> = [];

        const thisExercise = doc.data();

        let lastExerciseReps = 0;
        let lastExerciseWeight = 0;

        thisExercise.attempts.forEach(
          (attempt: { [s: string]: unknown } | ArrayLike<unknown>) => {
            const valuesArray = Object.values(attempt) as setObject[];

            if (valuesArray[0]) {
              lastExerciseReps = valuesArray[0].reps;
              lastExerciseWeight = valuesArray[0].weight;
            }

            thisExerciseAttempts.push(valuesArray);
          },
        );

        const lastExercisesObject: lastValuesFromExercise = {
          reps: lastExerciseReps,
          weight: lastExerciseWeight,
        };

        lastValuesFromExercises.current.push(lastExercisesObject);

        const rowFromFirestore: exerciseObject = {
          id: thisExercise.id,
          name: thisExercise.name,
          attempts: thisExerciseAttempts,
          order: thisExercise.order,
        };

        dataFromFirestore.push(rowFromFirestore);
      });

      setExercises(dataFromFirestore);

      if (dataFromFirestore.length - exercisesTotalRef.current === 1) {
        setExerciseIndex(exercisesTotalRef.current);
      }
      exercisesTotalRef.current = dataFromFirestore.length;
    });

    return () => unsubscribe();
  }, []);

  return (
    <div className="flex h-full flex-col">
      <ExerciseAdder handleExerciseAdded={handleExerciseAdded} />
      {/* <div className="mb-4 border-b-2 border-gray-300 bg-gray-500 p-4">
        {exercises.map((item, index) => (
          <button
            key={index}
            className={`mr-2 rounded-md border-1 border-white px-3 py-1 text-lg text-white ${index === exerciseIndex && "bg-black"}`}
            onClick={() => {
              setExerciseIndex(index);
            }}
          >
            {item.name}
          </button>
        ))}
      </div> */}
      <ExercisesIndex exercises={exercises} deleteExercise={deleteExercise} />
      <div
        ref={scroller}
        className="[&>*]:last]:animate-pulse max-h-full flex-1 overflow-y-auto"
      >
        {exercises.map((item, index) => (
          <Exercise
            data={item}
            key={index}
            isActive={isActiveArray[index]}
            newAttempt={() => {
              handleNewAttempt(index);
            }}
          />
        ))}
      </div>
      <SetAdder
        handleNewSet={handleNewSet}
        previousReps={lastReps}
        previousWeight={lastWeight}
      />
    </div>
  );
}

export default Exercises;
